{"/home/travis/build/npmtest/node-npmtest-gulp-electron/test.js":"/* istanbul instrument in package npmtest_gulp_electron */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-electron/lib.npmtest_gulp_electron.js":"/* istanbul instrument in package npmtest_gulp_electron */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_electron = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_electron = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-electron/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-electron && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_electron */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_electron\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_electron.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_electron.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_electron.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_electron.__dirname + '/lib.npmtest_gulp_electron.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-electron/node_modules/gulp-electron/index.js":"var Decompress, File, PLUGIN_NAME, PluginError, ProgressBar, Promise, asar, asarPackaging, async, chalk, childProcess, distributeApp, distributeBase, distributeMacIcon, distributePlist, distributeWinIcon, download, electron, fs, getApmPath, grs, isDir, isExists, isFile, mv, mvAsync, packaging, path, plist, rcedit, rebuild, rm, rmAsync, signDarwin, spawn, through, unzip, util;\n\nfs = require('fs-extra');\n\ngrs = require('grs');\n\npath = require('path');\n\nasync = require('async');\n\nPromise = require('bluebird');\n\nmv = require('mv');\n\nmvAsync = Promise.promisify(mv);\n\nrm = require('rimraf');\n\nrmAsync = Promise.promisify(rm);\n\nutil = require('gulp-util');\n\nasar = require('asar');\n\nchalk = require('chalk');\n\nDecompress = require('decompress-zip');\n\nPluginError = util.PluginError;\n\nthrough = require('through2');\n\nchildProcess = require('child_process');\n\nProgressBar = require('progress');\n\nFile = require('vinyl');\n\nplist = require('plist');\n\nrcedit = require('rcedit');\n\nPLUGIN_NAME = 'gulp-electron';\n\nmodule.exports = electron = function(options) {\n  var bufferContents, endStream, packageJson;\n  PLUGIN_NAME = 'gulp-electron';\n  options = options || {};\n  if (!options.release || !options.version || !options.src || !options.cache) {\n    throw new PluginError(PLUGIN_NAME, 'Miss version or release path.');\n  }\n  if (path.resolve(options.src) === path.resolve(\".\")) {\n    throw new PluginError(PLUGIN_NAME, 'src path can not root path.');\n  }\n  packageJson = options.packageJson;\n  if (typeof options.packageJson === 'string') {\n    packageJson = require(packageJson);\n  }\n  if (options.platforms == null) {\n    options.platforms = ['darwin'];\n  }\n  if (options.apm == null) {\n    options.apm = getApmPath();\n  }\n  if (options.symbols == null) {\n    options.symbols = false;\n  }\n  if (options.rebuild == null) {\n    options.rebuild = false;\n  }\n  if (options.asar == null) {\n    options.asar = false;\n  }\n  if (options.asarUnpack == null) {\n    options.asarUnpack = false;\n  }\n  if (options.asarUnpackDir == null) {\n    options.asarUnpackDir = false;\n  }\n  if (options.packaging == null) {\n    options.packaging = true;\n  }\n  if (options.ext == null) {\n    options.ext = 'zip';\n  }\n  if (typeof options.platforms === 'string') {\n    options.platforms = [options.platforms];\n  }\n  bufferContents = function(file, enc, cb) {\n    var src;\n    src = file;\n    return cb();\n  };\n  endStream = function(callback) {\n    var platforms, push;\n    push = this.push;\n    platforms = ['darwin', 'win32', 'linux', 'darwin-x64', 'linux-ia32', 'linux-x64', 'win32-ia32', 'win32-x64', 'linux-arm'];\n    return Promise.map(options.platforms, function(platform) {\n      var _src, binName, cache, cacheFile, cachePath, cacheZip, cacheedPath, contentsPlistDir, defaultAppName, electronFile, electronFileDir, electronFilePath, getUserHome, identity, packagingCmd, pkg, pkgZip, pkgZipDir, pkgZipFilePath, pkgZipPath, platformDir, platformPath, ref, ref1, suffix, targetApp, targetAppDir, targetAppPath, targetAsarPath, targetDir, targetDirPath, targetZip, unpackagingCmd;\n      if (platform === 'osx') {\n        platform = 'darwin';\n      }\n      if (platform === 'win') {\n        platform = 'win32';\n      }\n      if (platforms.indexOf(platform) < 0) {\n        throw new PluginError(PLUGIN_NAME, \"Not support platform \" + platform);\n      }\n      if (options.ext == null) {\n        options.ext = \"zip\";\n      }\n      pkgZip = pkg = packageJson.name + \"-\" + packageJson.version + \"-\" + platform;\n      if (options.symbols) {\n        pkgZip += '-symbols';\n      }\n      pkgZip += \".\" + options.ext;\n      cacheZip = cache = \"electron-\" + options.version + \"-\" + platform;\n      if (options.symbols) {\n        cacheZip += '-symbols';\n      }\n      cacheZip += \".\" + options.ext;\n      getUserHome = function() {\n        return process.env.HOME || process.env.USERPROFILE;\n      };\n      if (!path.isAbsolute(options.cache)) {\n        if (options.cache.match(/^\\~/)) {\n          options.cache = path.join(getUserHome(), options.cache.replace(/^\\~\\//, \"\"));\n        } else {\n          options.cache = path.resolve(options.cache);\n        }\n      }\n      cachePath = path.resolve(options.cache, options.version);\n      cacheFile = path.resolve(cachePath, cacheZip);\n      cacheedPath = path.resolve(cachePath, cache);\n      if (!path.isAbsolute(options.release)) {\n        if (options.release.match(/^\\~/)) {\n          options.release = path.join(getUserHome(), options.release.replace(/^\\~\\//, \"\"));\n        } else {\n          options.release = path.resolve(options.release);\n        }\n      }\n      pkgZipDir = path.resolve(options.release, options.version);\n      pkgZipPath = path.resolve(pkgZipDir);\n      pkgZipFilePath = path.resolve(pkgZipDir, pkgZip);\n      platformDir = path.join(pkgZipDir, platform);\n      platformPath = path.resolve(platformDir);\n      targetApp = \"\";\n      defaultAppName = \"Electron\";\n      suffix = \"\";\n      _src = path.join('resources', 'app');\n      if (platform.indexOf('darwin') >= 0) {\n        suffix = \".app\";\n        electronFile = \"Electron\" + suffix;\n        targetZip = packageJson.name + suffix;\n        _src = path.join(packageJson.name + suffix, 'Contents', 'Resources', 'app');\n      } else if (platform.indexOf('win') >= 0) {\n        suffix = \".exe\";\n        electronFile = \"electron\" + suffix;\n        targetZip = \".\";\n      } else {\n        electronFile = \"electron\";\n        targetZip = \".\";\n      }\n      electronFileDir = path.join(platformDir, electronFile);\n      electronFilePath = path.resolve(electronFileDir);\n      binName = packageJson.name + suffix;\n      targetAppDir = path.join(platformDir, binName);\n      targetAppPath = path.join(targetAppDir);\n      _src = path.join('resources', 'app');\n      if (platform.indexOf('darwin') >= 0) {\n        _src = path.join(binName, 'Contents', 'Resources', 'app');\n      }\n      targetDir = path.join(packageJson.name, _src);\n      targetDirPath = path.resolve(platformDir, _src);\n      targetAsarPath = path.resolve(platformDir, _src + \".asar\");\n      contentsPlistDir = path.join(targetAppPath, 'Contents', 'Info.plist');\n      identity = \"\";\n      if ((((ref = options.platformResources) != null ? (ref1 = ref.darwin) != null ? ref1.identity : void 0 : void 0) != null) && isFile(options.platformResources.darwin.identity)) {\n        identity = fs.readFileSync(options.platformResources.darwin.identity, 'utf8').trim();\n\n        /*\n              signingCmd =\n         * http://sevenzip.sourceforge.jp/chm/cmdline/commands/extract.htm\n        darwin: [\n            cmd: 'codesign'\n            args: ['--deep', '--force', '--verbose', '--sign', identity, path.join(targetAppDir ,'Contents', 'Frameworks', 'Electron\\\\ Framework.framework')]\n          ,\n            cmd: 'codesign'\n            args: ['--deep', '--force', '--verbose', '--sign', identity, path.join(targetAppDir ,'Contents', 'Frameworks', 'Electron\\\\ Helper EH.app')]\n          ,\n            cmd: 'codesign'\n            args: ['--deep', '--force', '--verbose', '--sign', identity, path.join(targetAppDir ,'Contents', 'Frameworks', 'Electron\\\\ Helper NP.app')]\n          ,\n            cmd: 'codesign'\n            args: ['--deep', '--force', '--verbose', '--sign', identity, path.join(targetAppDir ,'Contents', 'Frameworks', 'Electron\\\\ Helper.app')]\n          ,\n            cmd: 'codesign'\n            args: ['--deep', '--force', '--verbose', '--sign', identity, path.join(targetAppDir ,'Contents', 'Frameworks', 'ReactiveCocoa.framework')]\n          ,\n            cmd: 'codesign'\n            args: ['--deep', '--force', '--verbose', '--sign', identity, path.join(targetAppDir ,'Contents', 'Frameworks', 'Squirrel.framework')]\n          ,\n            cmd: 'codesign'\n            args: ['--deep', '--force', '--verbose', '--sign', identity, path.join(targetAppDir,'Contents', 'Frameworks', 'Mantle.framework')]\n          ,\n            cmd: 'codesign'\n            args: ['--deep', '--force', '--verbose', '--sign', identity, targetAppDir]\n        ]\n         */\n      }\n      unpackagingCmd = {\n        win32: {\n          cmd: '7z',\n          args: ['x', cacheFile, '-o' + cacheedPath]\n        },\n        darwin: {\n          cmd: 'unzip',\n          args: ['-q', '-o', cacheFile, '-d', cacheedPath]\n        },\n        linux: {\n          cmd: 'unzip',\n          args: ['-o', cacheFile, '-d', cacheedPath]\n        }\n      };\n      packagingCmd = {\n        win32: {\n          cmd: '7z',\n          args: ['a', path.join('..', pkgZip), targetZip],\n          opts: {\n            cwd: platformPath\n          }\n        },\n        darwin: {\n          cmd: 'ditto',\n          args: ['-c', '-k', '--sequesterRsrc', '--keepParent', targetZip, path.join('..', pkgZip)],\n          opts: {\n            cwd: platformPath\n          }\n        },\n        linux: {\n          cmd: 'zip',\n          args: ['-9', '-y', '-r', path.join('..', pkgZip), targetZip],\n          opts: {\n            cwd: platformPath\n          }\n        }\n      };\n      return new Promise(function(resolve, reject) {\n        return Promise.resolve().then(function() {\n          return download(cacheFile, cachePath, options.version, cacheZip, options.token);\n        }).then(function() {\n          return unzip(cacheFile, cacheedPath, unpackagingCmd[process.platform]);\n        }).then(function() {\n          return distributeBase(platformPath, cacheedPath, electronFilePath, targetAppPath);\n        }).then(function() {\n          if (!options.rebuild) {\n            return Promise.resolve();\n          }\n          util.log(PLUGIN_NAME, \"Rebuilding modules\");\n          return rebuild({\n            cmd: options.apm,\n            args: ['rebuild']\n          });\n        }).then(function() {\n          util.log(PLUGIN_NAME, \"distributeApp \" + targetAppDir);\n          if (!path.isAbsolute(options.src)) {\n            if (options.src.match(/^\\~/)) {\n              options.src = path.join(getUserHome(), options.src.replace(/^\\~\\//, \"\"));\n            } else {\n              options.src = path.resolve(options.src);\n            }\n          }\n          return distributeApp(options.src, targetDirPath);\n        }).then(function() {\n          var ref2;\n          if (platform.indexOf('darwin') === -1 || (((ref2 = options.platformResources) != null ? ref2.darwin : void 0) == null)) {\n            return Promise.resolve();\n          }\n          util.log(PLUGIN_NAME, \"distributePlist \" + targetAppPath);\n          return distributePlist(options.platformResources.darwin, packageJson.name, targetAppPath);\n        }).then(function() {\n          var ref2;\n          if (platform.indexOf('darwin') === -1 || (((ref2 = options.platformResources) != null ? ref2.darwin : void 0) == null)) {\n            return Promise.resolve();\n          }\n          util.log(PLUGIN_NAME, \"distributeMacIcon \" + targetAppDir);\n          return distributeMacIcon(options.platformResources.darwin.icon, targetAppPath);\n        }).then(function() {\n          var ref2;\n          if (platform.indexOf('win32') === -1 || (((ref2 = options.platformResources) != null ? ref2.win : void 0) == null)) {\n            return Promise.resolve();\n          }\n          util.log(PLUGIN_NAME, \"distributeWinIcon \" + targetAppDir);\n          return distributeWinIcon(options.platformResources.win, targetAppPath);\n        }).then(function() {\n          if (!options.asar) {\n            return Promise.resolve();\n          }\n          util.log(PLUGIN_NAME, \"packaging app.asar\");\n          return asarPackaging(targetDirPath, targetAsarPath, {\n            unpack: options.asarUnpack,\n            unpackDir: options.asarUnpackDir\n          });\n        }).then(function() {\n          if (!options.packaging) {\n            return Promise.resolve();\n          }\n          return Promise.resolve();\n\n          /*\n          if platform is \"darwin-x64\" and process.platform is \"darwin\"\n            if identity is \"\"\n              util.log PLUGIN_NAME, \"not found identity file. skip signing\"\n              return Promise.resolve()\n            signDarwin signingCmd.darwin\n           */\n        }).then(function() {\n          if (!options.packaging) {\n            return Promise.resolve();\n          }\n          return packaging(pkgZipFilePath, packagingCmd[process.platform]);\n        }).then(function() {\n          return resolve();\n        });\n      });\n    })[\"finally\"](function() {\n      util.log(PLUGIN_NAME, \"all distribute done.\");\n      return callback();\n    });\n  };\n  return through.obj(bufferContents, endStream);\n};\n\nisDir = function() {\n  var filepath;\n  filepath = path.join.apply(path, arguments);\n  return fs.existsSync(filepath) && !fs.statSync(filepath).isFile();\n};\n\nisFile = function() {\n  var filepath;\n  filepath = path.join.apply(path, arguments);\n  return fs.existsSync(filepath) && fs.statSync(filepath).isFile();\n};\n\nisExists = function() {\n  var filepath;\n  filepath = path.join.apply(path, arguments);\n  return fs.existsSync(filepath);\n};\n\ngetApmPath = function() {\n  var apmPath;\n  apmPath = path.join('apm', 'node_modules', 'atom-package-manager', 'bin', 'apm');\n  if (!isFile(apmPath)) {\n    return apmPath = 'apm';\n  }\n};\n\ndownload = function(cacheFile, cachePath, version, cacheZip, token) {\n  if (isFile(cacheFile)) {\n    util.log(PLUGIN_NAME, \"download skip: already exists\");\n    return Promise.resolve();\n  }\n  return new Promise(function(resolve, reject) {\n    var bar;\n    util.log(PLUGIN_NAME, \"download electron \" + cacheZip + \" cache filie.\");\n    fs.mkdirsSync(cachePath);\n    bar = null;\n    return grs({\n      repo: 'atom/electron',\n      tag: version,\n      name: cacheZip,\n      token: token\n    }).on('error', function(error) {\n      throw new PluginError(PLUGIN_NAME, error);\n    }).on('size', function(size) {\n      return bar = new ProgressBar(cacheFile + \" [:bar] :percent :etas\", {\n        complete: '>',\n        incomplete: ' ',\n        width: 20,\n        total: size\n      });\n    }).pipe(through(function(chunk, enc, cb) {\n      bar.tick(chunk.length);\n      this.push(chunk);\n      return cb();\n    })).pipe(fs.createWriteStream(cacheFile)).on('close', resolve).on('error', reject);\n  });\n};\n\nunzip = function(src, target, unpackagingCmd) {\n  if (isExists(target)) {\n    return Promise.resolve();\n  }\n  return new Promise(function(resolve, reject) {\n\n    /*\n    decompress = new Decompress src\n    decompress.on 'error', reject\n    decompress.on 'extract', ->\n      util.log PLUGIN_NAME, \"decompress done #{src}, #{target}\"\n      resolve()\n    decompress.extract\n      path: target\n      follow: true\n     */\n    return spawn(unpackagingCmd, function() {\n      return resolve();\n    });\n  });\n};\n\ndistributeBase = function(platformPath, cacheedPath, electronFilePath, targetAppPath) {\n  if (isExists(platformPath) && isExists(targetAppPath)) {\n    util.log(PLUGIN_NAME, \"distributeBase skip: already exists\");\n    return Promise.resolve();\n  }\n  return new Promise(function(resolve) {\n    fs.mkdirsSync(platformPath);\n    fs.copySync(cacheedPath, platformPath);\n    return mvAsync(electronFilePath, targetAppPath, {\n      mkdirp: true\n    }).then(resolve);\n  });\n};\n\ndistributeApp = function(src, targetDirPath) {\n  if (isExists(targetDirPath)) {\n    util.log(PLUGIN_NAME, \"distributeApp skip: already exists\");\n    return Promise.resolve();\n  }\n  return new Promise(function(resolve) {\n    return rmAsync(targetDirPath)[\"finally\"](function() {\n      fs.mkdirsSync(targetDirPath);\n      fs.copySync(src, targetDirPath);\n      return resolve();\n    });\n  });\n};\n\ndistributePlist = function(darwin, name, targetAppPath) {\n  return new Promise(function(resolve) {\n    var _binaryDest, _binarySrc, contentsPlist;\n    contentsPlist = plist.parse(fs.readFileSync(path.join(targetAppPath, 'Contents', 'Info.plist'), 'utf8'));\n    if (darwin.CFBundleDisplayName != null) {\n      contentsPlist.CFBundleDisplayName = darwin.CFBundleDisplayName;\n    }\n    if (darwin.CFBundleIdentifier != null) {\n      contentsPlist.CFBundleIdentifier = darwin.CFBundleIdentifier;\n    }\n    if (darwin.CFBundleName != null) {\n      contentsPlist.CFBundleName = darwin.CFBundleName;\n    }\n    if (darwin.CFBundleVersion != null) {\n      contentsPlist.CFBundleVersion = darwin.CFBundleVersion;\n    }\n    if (darwin.CFBundleExecutable != null) {\n      contentsPlist.CFBundleExecutable = darwin.CFBundleExecutable;\n    }\n    if (darwin.CFBundleURLTypes != null) {\n      contentsPlist.CFBundleURLTypes = darwin.CFBundleURLTypes;\n    }\n    fs.writeFileSync(path.join(targetAppPath, 'Contents', 'Info.plist'), plist.build(contentsPlist));\n    if (darwin.CFBundleExecutable != null) {\n      _binarySrc = path.join(targetAppPath, 'Contents', 'MacOS', 'Electron');\n      _binaryDest = path.join(targetAppPath, 'Contents', 'MacOS', darwin.CFBundleExecutable);\n      return mvAsync(_binarySrc, _binaryDest, {\n        mkdirp: true\n      }).then(resolve);\n    } else {\n      return resolve();\n    }\n  });\n};\n\ndistributeMacIcon = function(src, targetAppPath) {\n  return new Promise(function(resolve) {\n    var iconDir;\n    iconDir = path.join(targetAppPath, 'Contents', 'Resources', 'electron.icns');\n    fs.createReadStream(src).pipe(fs.createWriteStream(iconDir));\n    return resolve();\n  });\n};\n\ndistributeWinIcon = function(src, targetAppPath) {\n  return new Promise(function(resolve) {\n    rcedit(targetAppPath, src, resolve);\n    return resolve();\n  });\n};\n\nrebuild = function(cmd) {\n  return new Promise(function(resolve) {\n    return spawn(cmd, resolve);\n  });\n};\n\nasarPackaging = function(src, target, opts) {\n  var escSrc, escTarget;\n  escSrc = src.replace(/(\\\\\\s)/, \"\\\\ \");\n  escTarget = target.replace(/(\\\\\\s)/, \"\\\\ \");\n  return new Promise(function(resolve) {\n    util.log(PLUGIN_NAME, \"packaging app.asar \" + escSrc + \", \" + escTarget);\n    return asar.createPackageWithOptions(escSrc, escTarget, opts, function() {\n      return resolve();\n    });\n  });\n};\n\nsignDarwin = function(signingCmd) {\n  var promiseList;\n  promiseList = [];\n  signingCmd.forEach(function(cmd) {\n    var p;\n    p = Promise.defer();\n    promiseList.push(p);\n    return spawn(cmd, function() {\n      return p.resolve();\n    });\n  });\n  return Promise.when(promiseList);\n};\n\npackaging = function(pkgZipFilePath, packagingCmd) {\n  if (!isFile(pkgZipFilePath)) {\n    return new Promise(function(resolve) {\n      var cmd;\n      cmd = packagingCmd;\n      return spawn(cmd, function() {\n        return resolve();\n      });\n    });\n  }\n  return new Promise(function(resolve) {\n    return rmAsync(pkgZipFilePath)[\"finally\"](function() {\n      var cmd;\n      cmd = packagingCmd;\n      return spawn(cmd, function() {\n        return resolve();\n      });\n    });\n  });\n};\n\nspawn = function(options, cb) {\n  var error, proc, stderr, stdout;\n  stdout = [];\n  stderr = [];\n  error = null;\n  options.args.forEach(function(arg) {\n    return arg = arg.replace(' ', '\\\\ ');\n  });\n  util.log(\"> \" + options.cmd + \" \" + (options.args.join(' ')));\n  proc = childProcess.spawn(options.cmd, options.args, options.opts);\n  proc.stdout.on('data', function(data) {\n    stdout.push(data.toString());\n    if (process.NODE_ENV === 'test') {\n      return util.log(data.toString());\n    }\n  });\n  proc.stderr.on('data', function(data) {\n    return stderr.push(data.toString());\n  });\n  return proc.on('exit', function(code, signal) {\n    var results;\n    if (code !== 0) {\n      error = new Error(signal);\n    }\n    results = {\n      stderr: stderr.join(''),\n      stdout: stdout.join(''),\n      code: code\n    };\n    if (code !== 0) {\n      throw new PluginError(PLUGIN_NAME, results.stderr || 'unknow error , maybe you can try delete the zip packages.');\n    }\n    return cb(error, results);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-electron/node_modules/gulp-electron/gulpfile.js":"'use strict';\n/* jshint node:true */\n\nprocess.env.NODE_ENV = 'test';\nrequire('should');\n\nvar path = require('path');\nvar gulp = require('gulp');\nvar gutil = require('gulp-util');\nvar coffee = require('gulp-coffee');\nvar coffeelint = require('gulp-coffeelint');\nvar mocha = require('gulp-mocha');\n\n// Files.\nvar src = '*.coffee';\nvar tests = 'test/*.mocha.js';\n\n// Coffee Lint\ngulp.task('lint', function() {\n    gulp.src(src)\n        .pipe(coffeelint())\n        .pipe(coffeelint.reporter());\n});\n\n// Compile coffee scripts.\ngulp.task('coffee', ['lint'], function() {\n    return gulp.src(src)\n        .pipe(coffee({\n            bare: true\n        }).on('error', gutil.log))\n        .pipe(gulp.dest('.'))\n        .on('error', gutil.log);\n});\n\n// Run tests.\ngulp.task('mocha', ['coffee'], function() {\n    return gulp.src(tests)\n        .pipe(mocha({\n            timeout: 10000,\n            reporter: 'spec'\n        }));\n});\n\ngulp.task('watch', function() {\n    gulp.watch(src, ['coffee']);\n});\n\ngulp.task('default', ['coffee']);\n"}